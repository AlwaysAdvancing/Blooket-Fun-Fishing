(function() {
    'use-strict';

    // --- Robust Game State Finder ---
    function getGameState() { try { const el = document.querySelector("#app"); if (!el) return null; const rk = Object.keys(el).find(k => k.startsWith("__reactContainer$")); if (!rk) return null; let n = el[rk]; while (n) { if (n.stateNode?.props?.liveGameController) return n.stateNode; n = n.child; } return null; } catch (e) { return null; } }

    // --- Cheats & Toggles ---
    window.autoCastInterval = null; window.frenzyInterval = null;
    const cheats = {
        setLure: (e) => { const gs = getGameState(); if (gs?.state) gs.setState({ lure: parseInt(e.target.value, 10) }); },
        setWeight: (weight) => { if (!weight || isNaN(weight)) return; const gs = getGameState(); if (gs?.state) { gs.setState({ weight: parseInt(weight, 10) }); const wi = document.getElementById('blooket-gui-weight-input'); if (wi) { wi.style.transition = 'none'; wi.style.backgroundColor = 'var(--gui-accent-green)'; setTimeout(() => { wi.style.transition = 'background-color 0.5s'; wi.style.backgroundColor = 'var(--gui-bg-solid)'; }, 100); } } },
        startAutoCast: () => { if (window.autoCastInterval) return; window.autoCastInterval = setInterval(() => { const gs = getGameState(); if (gs?.state?.canFish) gs.cast(); }, 1000); },
        stopAutoCast: () => { clearInterval(window.autoCastInterval); window.autoCastInterval = null; },
        startFrenzy: () => { if (window.frenzyInterval) return; window.frenzyInterval = setInterval(() => { const gs = getGameState(); if (gs?.state) gs.setState({ isFrenzy: true }); }, 100); },
        stopFrenzy: () => { clearInterval(window.frenzyInterval); window.frenzyInterval = null; const gs = getGameState(); if (gs?.state) gs.setState({ isFrenzy: false }); },
        toggleAutoAnswerOn: () => console.log("Auto Answer ON"), toggleAutoAnswerOff: () => console.log("Auto Answer OFF"),
    };

    // --- Settings & Persistence ---
    const defaultSettings = { colors: { '--gui-accent': '#5865f2', '--gui-accent-green': '#2ecc71', '--gui-bg-solid': '#1e1e1e', '--gui-bg-light-solid': '#2d2d2d', '--gui-border-solid': '#444444', '--gui-text': '#e0e0e0', '--gui-text-dark': '#999999' }, transparency: 0, bgImage: null, toggleKey: 'k', size: { width: '340px', height: 'auto' } };
    let settings = {};
    function saveSettings() { localStorage.setItem('blooketGuiSettings', JSON.stringify(settings)); }
    function hexToRgba(hex, alpha) { const r = parseInt(hex.slice(1, 3), 16), g = parseInt(hex.slice(3, 5), 16), b = parseInt(hex.slice(5, 7), 16); return `rgba(${r}, ${g}, ${b}, ${alpha})`; }
    function updateAppearance() { const alpha = 1.0 - (settings.transparency / 100.0); Object.entries(settings.colors).forEach(([k, v]) => gui.style.setProperty(k.replace('-solid', ''), k.endsWith('-solid') ? hexToRgba(v, alpha) : v)); gui.style.setProperty('--gui-bg-solid', settings.colors['--gui-bg-solid']); if (settings.bgImage) { gui.style.backgroundImage = `url(${settings.bgImage})`; } else { gui.style.backgroundImage = 'none'; } }

    // --- GUI STYLES (Scoped to prevent conflicts) ---
    const styles = `
        #blooket-hack-gui { position: fixed; top: 50px; left: 50px; min-width: 320px; max-width: 90vw; min-height: 400px; max-height: 90vh; border-radius: 8px; box-shadow: 0 5px 25px rgba(0, 0, 0, 0.5); z-index: 10001; display: flex; resize: both; overflow: hidden; background-size: cover; background-position: center; }
        #blooket-hack-gui #gui-panel { width: 100%; height: 100%; display: flex; flex-direction: column; background-color: var(--gui-bg); border: 1px solid var(--gui-border); border-radius: 8px; overflow: hidden; font-family: 'Inter', 'Roboto', 'Arial', sans-serif; color: var(--gui-text); }
        #blooket-hack-gui #gui-header, #blooket-hack-gui #gui-tab-bar { flex-shrink: 0; background-color: var(--gui-bg-light); border-bottom: 1px solid var(--gui-border); }
        #blooket-hack-gui #gui-header { display: flex; justify-content: space-between; align-items: center; padding: 8px 15px; cursor: move; font-weight: 600; }
        #blooket-hack-gui #gui-close-btn { cursor: pointer; font-size: 20px; line-height: 1; }
        #blooket-hack-gui #gui-tab-bar { display: flex; flex-wrap: wrap; padding: 10px 15px; gap: 8px; }
        #blooket-hack-gui .gui-tab-btn { background-color: var(--gui-bg); border: 1px solid var(--gui-border); color: var(--gui-text-dark); padding: 5px 12px; border-radius: 15px; cursor: pointer; font-size: 0.9em; transition: all 0.2s; }
        #blooket-hack-gui .gui-tab-btn.active { background-color: var(--gui-accent); border-color: var(--gui-accent); color: white; font-weight: 600; }
        #blooket-hack-gui #gui-content-area { padding: 15px; overflow-y: auto; flex-grow: 1; min-height: 0; }
        #blooket-hack-gui .cheat-section { display: flex; flex-direction: column; gap: 10px; }
        #blooket-hack-gui .cheat-section h2 { font-size: 0.8em; text-transform: uppercase; color: var(--gui-text-dark); margin: 0; padding-bottom: 5px; }
        #blooket-hack-gui .cheat-card { background-color: var(--gui-bg-light); border: 1px solid var(--gui-border); border-radius: 6px; padding: 12px; display: flex; justify-content: space-between; align-items: center; }
        #blooket-hack-gui .cheat-card-action { display: flex; align-items: center; gap: 8px; }
        #blooket-hack-gui .cheat-card-action button, #blooket-hack-gui .cheat-card-action select, #blooket-hack-gui .cheat-card-action label { background-color: var(--gui-accent); color: white; border: none; border-radius: 5px; padding: 8px 12px; font-size: 0.9em; font-weight: 600; cursor: pointer; transition: background-color 0.2s; }
        #blooket-hack-gui .gui-input-box { background-color: var(--gui-bg-solid); border: 1px solid var(--gui-border); color: var(--gui-text); border-radius: 5px; padding: 8px; font-size: 0.9em; width: 70px; text-align: center; }
        #blooket-hack-gui input[type="color"] { -webkit-appearance: none; -moz-appearance: none; appearance: none; width: 44px; height: 28px; background-color: transparent; border: none; border-radius: 5px; cursor: pointer; }
        #blooket-hack-gui input[type="color"]::-webkit-color-swatch { border-radius: 4px; border: 1px solid var(--gui-border); }
    `;
    const styleSheet = document.createElement("style"); styleSheet.innerText = styles; document.head.appendChild(styleSheet);

    // --- GUI HTML & Initialization ---
    const gui = document.createElement('div'); gui.id = 'blooket-hack-gui'; gui.innerHTML = `<div id="gui-panel"><div id="gui-header"><span>Blooket Cheats</span><span id="gui-close-btn">&times;</span></div><div id="gui-tab-bar"></div><div id="gui-content-area"></div></div>`; document.body.appendChild(gui);
    const tabBar = gui.querySelector('#gui-tab-bar'), contentArea = gui.querySelector('#gui-content-area');
    settings = { ...defaultSettings, ...JSON.parse(localStorage.getItem('blooketGuiSettings')) };
    gui.style.width = settings.size.width; gui.style.height = settings.size.height;
    updateAppearance();

    // --- HELPER FUNCTIONS ---
    function createCheatSection(gamemode, title) { const s = document.createElement('div'); s.className = 'cheat-section'; s.dataset.gamemode = gamemode; s.innerHTML = `<h2>${title}</h2>`; contentArea.appendChild(s); return s; }
    function createCheat(section, title, actionElement) { const c = document.createElement('div'); c.className = 'cheat-card'; c.innerHTML = `<div class="cheat-card-info">${title}</div>`; const a = document.createElement('div'); a.className = 'cheat-card-action'; a.appendChild(actionElement); c.appendChild(a); section.appendChild(c); }
    function createToggle(title, onAction, offAction) { const b = document.createElement('button'); b.textContent = title; b.isToggled = false; b.addEventListener('click', () => { b.isToggled = !b.isToggled; if (b.isToggled) { b.textContent = `${title} (ON)`; b.style.backgroundColor = 'var(--gui-accent-green)'; onAction(); } else { b.textContent = title; b.style.backgroundColor = 'var(--gui-accent)'; offAction(); } }); return b; }
    function createColorPicker(section, label, varName) { const i = document.createElement('input'); i.type = 'color'; i.dataset.var = varName; i.value = settings.colors[varName]; i.oninput = (e) => { settings.colors[varName] = e.target.value; updateAppearance(); saveSettings(); }; createCheat(section, label, i); }
    function shadeColor(c, p) { let f = parseInt(c.slice(1), 16), t = p < 0 ? 0 : 255, R = f >> 16, G = f >> 8 & 0x00FF, B = f & 0x0000FF; return "#" + (0x1000000 + (Math.round((t - R) * p) + R) * 0x10000 + (Math.round((t - G) * p) + G) * 0x100 + (Math.round((t - B) * p) + B)).toString(16).slice(1); }

    // --- POPULATE THE GUI ---
    const fishingSection = createCheatSection('fishing', 'Fishing Frenzy'), globalSection = createCheatSection('global', 'Global'), cryptoSection = createCheatSection('crypto', 'Crypto Hack'), towerSection = createCheatSection('tower', 'Tower Defense'), brawlSection = createCheatSection('monster', 'Monster Brawl'), settingsSection = createCheatSection('settings', 'Settings');
    createCheat(fishingSection, 'Fishing Frenzy Multiplier', createToggle('Frenzy Event', cheats.startFrenzy, cheats.stopFrenzy)); createCheat(fishingSection, 'Auto-Cast', createToggle('Auto-Cast', cheats.startAutoCast, cheats.stopAutoCast));
    const rodLevelDropdown = document.createElement('select'); for (let i = 0; i < 5; i++) rodLevelDropdown.add(new Option(`Level ${i + 1}`, i)); rodLevelDropdown.onchange = cheats.setLure; createCheat(fishingSection, 'Set Lure/Rod', rodLevelDropdown);
    const weightActionContainer = document.createElement('div'); const weightInput = Object.assign(document.createElement('input'), { id: 'blooket-gui-weight-input', className: 'gui-input-box', type: 'number', placeholder: 'e.g. 500' }); weightInput.onkeydown = (e) => { if (e.key === 'Enter') { e.preventDefault(); cheats.setWeight(e.target.value); } }; weightActionContainer.append(weightInput, Object.assign(document.createElement('span'), { textContent: 'lbs' })); createCheat(fishingSection, 'Set Weight', weightActionContainer);
    createCheat(globalSection, 'Auto Answer', createToggle('Auto Answer', cheats.toggleAutoAnswerOn, cheats.toggleAutoAnswerOff));
    cryptoSection.innerHTML += `<p style="color:var(--gui-text-dark);text-align:center;">Cheats for Crypto Hack will go here.</p>`; towerSection.innerHTML += `<p style="color:var(--gui-text-dark);text-align:center;">Cheats for Tower Defense 2 will go here.</p>`; brawlSection.innerHTML += `<p style="color:var(--gui-text-dark);text-align:center;">Cheats for Monster Brawl will go here.</p>`;
    // --- SETTINGS CONTENT ---
    const masterPicker = document.createElement('input'); masterPicker.type = 'color'; masterPicker.value = settings.colors['--gui-accent']; masterPicker.oninput = (e) => { const base = e.target.value; settings.colors = { ...settings.colors, '--gui-accent': base, '--gui-accent-green': shadeColor(base, 0.4).replace(base.slice(1, 3), '2e'), '--gui-bg-solid': shadeColor(base, -0.9), '--gui-bg-light-solid': shadeColor(base, -0.8), '--gui-border-solid': shadeColor(base, -0.7) }; updateAppearance(); saveSettings(); document.querySelectorAll('#blooket-hack-gui input[type="color"]').forEach(p => p.value = settings.colors[p.dataset.var]); };
    createCheat(settingsSection, 'Master Theme Color', masterPicker);
    createColorPicker(settingsSection, 'Toggle ON Color', '--gui-accent-green'); createColorPicker(settingsSection, 'Button / Toggle OFF Color', '--gui-accent'); createColorPicker(settingsSection, 'Main BG Solid Color', '--gui-bg-solid'); createColorPicker(settingsSection, 'Header/Card Solid Color', '--gui-bg-light-solid');
    const transparencyContainer = document.createElement('div'); transparencyContainer.style.display = 'flex'; transparencyContainer.style.alignItems = 'center'; transparencyContainer.style.gap = '10px'; const slider = document.createElement('input'); slider.type = 'range'; slider.min = 0; slider.max = 80; slider.step = 1; slider.value = settings.transparency; slider.style.flexGrow = '1'; const percentLabel = document.createElement('span'); percentLabel.style.minWidth = '40px'; percentLabel.textContent = `${slider.value}%`; slider.oninput = () => { settings.transparency = parseInt(slider.value); percentLabel.textContent = `${slider.value}%`; updateAppearance(); saveSettings(); }; transparencyContainer.append(slider, percentLabel); createCheat(settingsSection, 'UI Transparency', transparencyContainer);
    const bgActionContainer = document.createElement('div'); const bgFileInput = document.createElement('input'); bgFileInput.type = 'file'; bgFileInput.accept = 'image/*'; bgFileInput.style.display = 'none'; bgFileInput.id = 'gui-bg-upload'; const bgSelectLabel = document.createElement('label'); bgSelectLabel.id = 'gui-bg-select-label'; bgSelectLabel.htmlFor = 'gui-bg-upload'; bgSelectLabel.textContent = 'Select Image'; const bgRemoveBtn = document.createElement('button'); bgRemoveBtn.textContent = 'Remove'; bgRemoveBtn.style.backgroundColor = '#6c757d'; bgActionContainer.append(bgSelectLabel, bgRemoveBtn);
    bgFileInput.onchange = (e) => { const file = e.target.files[0]; if (!file) return; if (file.size > 5 * 1024 * 1024) { alert("Image too large! Max 5MB."); return; } const reader = new FileReader(); reader.onload = (event) => { settings.bgImage = event.target.result; slider.value = 50; slider.dispatchEvent(new Event('input')); }; reader.readAsDataURL(file); };
    bgRemoveBtn.onclick = () => { settings.bgImage = null; slider.value = 0; slider.dispatchEvent(new Event('input')); }; settingsSection.appendChild(bgFileInput); createCheat(settingsSection, 'Custom Background', bgActionContainer);
    const keybindButton = document.createElement('button'); keybindButton.id = 'gui-keybind-btn'; const displayKey = (settings.toggleKey === ' ') ? 'Space' : settings.toggleKey.toUpperCase(); keybindButton.textContent = `Keybind: ${displayKey}`; keybindButton.onclick = () => { keybindButton.textContent = 'Press any key...'; const keydownHandler = (e) => { e.preventDefault(); settings.toggleKey = e.key; const newDisplayKey = (e.key === ' ') ? 'Space' : e.key.toUpperCase(); keybindButton.textContent = `Keybind: ${newDisplayKey}`; saveSettings(); document.removeEventListener('keydown', keydownHandler, { capture: true }); }; document.addEventListener('keydown', keydownHandler, { capture: true, once: true }); }; createCheat(settingsSection, 'Show/Hide Key', keybindButton);
    const resetButton = document.createElement('button'); resetButton.textContent = 'Reset All Settings'; resetButton.style.backgroundColor = '#dc3545';
    resetButton.onclick = () => { if (confirm("Are you sure you want to reset all main GUI settings to default?")) { settings = JSON.parse(JSON.stringify(defaultSettings)); updateAppearance(); saveSettings(); document.querySelectorAll('#blooket-hack-gui input[type="color"]').forEach(p => p.value = settings.colors[p.dataset.var]); slider.value = settings.transparency; percentLabel.textContent = `${settings.transparency}%`; keybindButton.textContent = `Keybind: ${settings.toggleKey.toUpperCase()}`; gui.style.width = defaultSettings.size.width; gui.style.height = defaultSettings.size.height; } };
    createCheat(settingsSection, 'Reset All', resetButton);

    // --- Admin Panel Module ---
    function initializeAdminPanel() {
        const helperUI = document.createElement('div');
        helperUI.className = 'helperUI';
        helperUI.style.cssText = 'position: fixed; top: 50px; right: 20px; width: 280px; max-height: 70vh; overflow-y: auto; background-color: rgba(0,0,0,0.85); border: 2px solid lime; border-radius: 8px; padding: 10px; z-index: 999998; display: none;';
        helperUI.innerHTML = `<h3 style="color: lime; text-align: center; margin-top:0;">👑 Admin Panel</h3>`;
        const floodContainer = document.createElement('div');
        floodContainer.style.cssText = 'margin-top: 15px; border-top: 1px solid lime; padding-top: 10px;';
        floodContainer.innerHTML = `<h4 style="color: lime; text-align: center; margin: 0 0 10px 0;">Game Flooder</h4>`;
        const nameInput = Object.assign(document.createElement('input'), { placeholder: 'Bot Name', style: 'width: 100%; box-sizing: border-box; margin-bottom: 5px; background: #111; color: lime; border: 1px solid lime; padding: 5px;' });
        const amountInput = Object.assign(document.createElement('input'), { type: 'number', placeholder: 'Amount', style: 'width: 100%; box-sizing: border-box; margin-bottom: 5px; background: #111; color: lime; border: 1px solid lime; padding: 5px;' });
        const startButton = Object.assign(document.createElement('button'), { textContent: 'Start Flood', style: 'width: 100%; margin: 6px 0; padding: 8px; background-color: black; color: lime; border: 1px solid lime; cursor: pointer;', onclick: () => { const baseName = nameInput.value; const amount = parseInt(amountInput.value); if (!baseName || !amount || isNaN(amount) || amount < 1) return alert("Invalid input."); const gs = getGameState(); if (!gs) return alert("Could not find game controller."); alert(`Flooding with ${amount} bots...`); let count = 0; const interval = setInterval(() => { if (++count > amount) return clearInterval(interval); gs.props.liveGameController.setVal({ path: `c/${baseName}${count}/`, val: { b: "Blook", w: 0 } }); }, 100); }, onmouseenter: (e) => e.target.style.backgroundColor = 'limegreen', onmouseleave: (e) => e.target.style.backgroundColor = 'black' });
        floodContainer.append(nameInput, amountInput, startButton);
        helperUI.appendChild(floodContainer);
        document.body.appendChild(helperUI);

        let isDragging = false, offsetX, offsetY;
        helperUI.addEventListener('mousedown', (e) => { if (e.target === helperUI || e.target.tagName === 'H3') { isDragging = true; offsetX = e.clientX - helperUI.offsetLeft; offsetY = e.clientY - helperUI.offsetTop; } });
        document.addEventListener('mousemove', (e) => { if (isDragging) { helperUI.style.left = (e.clientX - offsetX) + 'px'; helperUI.style.top = (e.clientY - offsetY) + 'px'; } });
        document.addEventListener('mouseup', () => isDragging = false);
        document.addEventListener('keydown', (e) => { if (e.key === 'Insert') helperUI.style.display = helperUI.style.display === 'none' ? 'block' : 'none'; });
    }

    // --- TAB LOGIC & EVENT LISTENERS ---
    const gameModes = ['All', 'Global', 'Fishing Frenzy', 'Crypto Hack', 'Tower Defense 2', 'Monster Brawl', 'Settings'];
    gameModes.forEach(mode => { const btn = document.createElement('button'); btn.className = 'gui-tab-btn'; btn.textContent = mode; btn.dataset.filter = mode.split(' ')[0].toLowerCase(); tabBar.appendChild(btn); btn.addEventListener('click', (e) => { tabBar.querySelectorAll('.gui-tab-btn').forEach(b => b.classList.remove('active')); e.target.classList.add('active'); const filter = e.target.dataset.filter; contentArea.querySelectorAll('.cheat-section').forEach(section => { section.style.display = (filter === 'all' || section.dataset.gamemode === filter) ? 'flex' : 'none'; }); }); });
    gui.querySelector('#gui-close-btn').onclick = () => { gui.remove(); document.querySelector('.helperUI')?.remove(); styleSheet.remove(); };
    tabBar.querySelector('.gui-tab-btn').click();
    document.addEventListener('keydown', (e) => { if (e.key.toLowerCase() === settings.toggleKey.toLowerCase() && !['INPUT', 'TEXTAREA', 'SELECT'].includes(document.activeElement.tagName)) { gui.style.display = gui.style.display === 'none' ? 'flex' : 'none'; } });
    let pos1 = 0, pos2 = 0, pos3 = 0, pos4 = 0; const header = gui.querySelector('#gui-header'); header.onmousedown = e => { e.preventDefault(); pos3 = e.clientX; pos4 = e.clientY; document.onmouseup = () => { document.onmouseup = null; document.onmousemove = null; settings.size = { width: gui.style.width, height: gui.style.height }; saveSettings(); }; document.onmousemove = event => { event.preventDefault(); pos1 = pos3 - event.clientX; pos2 = pos4 - event.clientY; pos3 = event.clientX; pos4 = event.clientY; gui.style.top = (gui.offsetTop - pos2) + "px"; gui.style.left = (gui.offsetLeft - pos1) + "px"; }; };

    // --- Initialize Everything ---
    initializeAdminPanel();
})();
